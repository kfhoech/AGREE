package AGREE_PLTL
public
annex agree {**
	----------------------------------------------------------------------------
	-- The Proposition Linear Temporal Logic (PLTL) AGREE library collects the
	-- canonical PLTL operators as AGREE nodes.  Since AGREE has Lustre-like
	-- semantics including direct access to temporal state operations 'followed
	-- by' ('->') and 'previous value' ('pre'), the PLTL operators 'Y' and 'Z'
	-- have been omitted.  These appear in comment form below.
	----------------------------------------------------------------------------
	
	----------------------------------------------------------------------------
	-- Check whether a condition was true in the previous instant.
	--
	-- Note: 'Yesterday' is the DeMorgan dual of 'Zyesterday' and is related
	-- by the identity Yesterday(i) = not Zyesterday(not i).
	--
	-- Inputs:
	--   i - the stream to be examined for truth in the previous time instant.
	--
	-- Returns:
	--   o - True if not the initial state and the input was true at the
	--       previous state.  Otherwise, false.
	----------------------------------------------------------------------------
--	node Yesterday(i: bool) returns (o: bool);
--	let
--		o = false -> pre(i);
--	tel;

	----------------------------------------------------------------------------
	-- Check whether a condition was true in the previous instant.
	--
	-- Note: 'Zyesterday' is the DeMorgan dual of 'Yesterday' and is related
	-- by the identity Zyesterday(i) = not Yesterday(not i).
	--
	-- Inputs:
	--   i - the stream to be examined for truth in the previous time instant.
	--
	-- Returns:
	--   o - True if the initial state or the input was true at the previous
	--       state.  Otherwise, false.
	----------------------------------------------------------------------------
--	node Zyesterday(i: bool) returns (o: bool);
--	let
--		o = true -> pre(i);
--	tel;

	----------------------------------------------------------------------------
	-- Check whether a condition has been true over the history of the analysis.
	--
	-- Note: 'Historically' is the DeMorgan dual of 'Once' and is related
	-- by the identity Historically(i) = not Once(not i).
	--
	-- Inputs:
	--   i - the stream to be examined for consistent true value over the
	--       history.
	--
	-- Returns:
	--   o - True if the input has been true at the initial state and for all
	--       subsequent states up to the current state.  Otherwise, false.
	----------------------------------------------------------------------------
	node Historically(i: bool) returns (o: bool);
	let
	--	o = i and (true -> pre(o));
		o = i and Zyesterday(Historically(i));
	tel;

	----------------------------------------------------------------------------
	-- Check whether a condition has ever been true over the history of the
	-- analysis.
	--
	-- Note: 'Once' is the DeMorgan dual of 'Historically' and is related
	-- by the identity Once(i) = not Historically(not i).
	--
	-- Inputs:
	--   i - the stream to be examined for consistent true value over the
	--       history.
	--
	-- Returns:
	--   o - True if the input has been true in at least one state (including
	--       the initial state) up to the current state.  Otherwise, false.
	----------------------------------------------------------------------------
	node Once(i: bool) returns (o: bool);
	let
	--	o = i or (false -> pre(o));
		o = i or Yesterday(Historically(i));
	tel;

	----------------------------------------------------------------------------
	-- Check whether a condition has ever been consistently true since a another
	-- condition became true.
	--
	-- The output is true if and only if the input 'a' has been true in all
	-- states since input 'b' most recently became true.
	--
	-- Note: 'Since' is the DeMorgan dual of 'Trigger' and is related
	-- by the identity Since(a, b) = not Trigger(not a, not b).
	--
	-- Inputs:
	--   a - the stream to be examined for consistent truth after the condition
	--       'b' became true.
	--   b - the stream after which it first becomes true that stream 'a' is
	--       examined for truth.
	--
	-- Returns:
	--   o - True if the input 'b' has been true in at least one state in the
	--       past and input 'a' has been consistently true in all states
	--       subsequent to the state in which 'b' became true.  Otherwise,
	--       false.
	----------------------------------------------------------------------------
	node Since(a : bool, b: bool) returns (o: bool);
	let
	--	o = b or (a and (false -> pre(o)));
		o = b or (a and Yesterday(Since(a, b)));
	tel;

	----------------------------------------------------------------------------
	-- Check whether a condition has ever been consistently true since the
	-- initial state or another condition was true.
	--
	-- The output is true if and only if the input 'b' has been true in all
	-- states since input 'a' most recently became true.
	--
	-- Note: 'Trigger' is the DeMorgan dual of 'Since' and is related
	-- by the identity Trigger(a, b) = not Since(not a, not b).
	--
	-- Inputs:
	--   a - the stream after which it first becomes true that stream 'b' is
	--       examined for truth.
	--   b - the stream to be examined for consistent truth after the initial
	--       state or condition 'b' became true.
	--
	-- Returns:
	--   o - True if the input 'b' is consistently true starting from the initial
	--       state or at any state where input 'a' was true.  Otherwise false.
	----------------------------------------------------------------------------
	node Trigger(a : bool, b: bool) returns (o: bool);
	let
	--	o = b and (a or (true -> pre(o)));
	--	o = not(Since(a, b));
		o = b and (a or Zyesterday(Trigger(a, b)));
	tel;

**};
end AGREE_PLTL;
